<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

<!-- 测试aop 基于xml配置 -->
<context:component-scan base-package="com.st.sp"></context:component-scan>
<bean id="myAspect" class="com.st.sp.bean.MyAspect"></bean>
<bean id="myCaculater" class="com.st.sp.impl.MyCaculater"></bean>

<aop:config>
    <!-- 相当于 提取出来的公共的 切入点表达式 有多个 切面时可以使用 pointcut-ref 来引用-->
    <aop:pointcut id="gloablePointCut" expression="execution(public int com.st.sp.impl.MyCaculater.*(..))"/>
    <!--  aop:aspect  后面 如果没用 ref="myAspect"  会报如下错误
    aspect tag needs aspect bean reference via 'ref'
    attribute when declaring advices
    -->
    <!-- 定义切面类 aop:aspect ref="myAspect"  -->
    <aop:aspect ref="myAspect" order="3">
        <!-- 定义切入点表达式  -->
        <aop:pointcut id="innerPointCut" expression="execution(public int com.st.sp.impl.MyCaculater.*(..))"/>
        <!-- 定义前置通知 表达式 可以 通过 pointcut="execution(public int com.st.sp.impl.MyCaculater.*(..))"
        来定义 ，method="before"  表示在那个方法上做切入
        -->
        <aop:before method="before" pointcut="execution(public int com.st.sp.impl.MyCaculater.*(..))"/>
        <!--  定义返回通知
        returning="result"   返回结果定义
        pointcut-ref="innerPointCut"  内部公用的切入点表达式引用
        -->
        <aop:after-returning method="afterReturning" pointcut-ref="innerPointCut" returning="result"/>
        <!-- 异常通知
         throwing="e"  异常信息定义
         pointcut-ref="gloablePointCut" 引用外部的全局切入点表达式
         -->
        <aop:after-throwing method="afterThrowing" pointcut-ref="gloablePointCut" throwing="e"/>
        <!-- 后置通知 -->
        <aop:after method="after" pointcut-ref="innerPointCut"/>
        <!-- 环绕通知  -->
        <aop:around method="around" pointcut-ref="gloablePointCut"/>
    </aop:aspect>
</aop:config>

 <!--  配置数据源 -->
    <context:property-placeholder location="classpath:/conf/db.properties"></context:property-placeholder>
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!-- ${jdbc.userName}  对应的properties 文件中的key 不能为username 因为username是spring的一个属性 -->
        <property name="user" value="${jdbc.userName}"></property>
        <property name="password" value="${jdbc.password}"></property>
        <property name="jdbcUrl" value="${jdbc.url}"></property>
        <property name="driverClass" value="${jdbc.driverClass}"></property>
    </bean>

    <!-- 配置事务管理器  -->
    <bean name="tm" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 控制的数据源 -->
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!-- 开启居于注解的事务模式,依赖tx 名称空间 transaction-manager 参数需要上一步中的 事务管理器的名称 -->
    <tx:annotation-driven transaction-manager="tm"/>
 <!-- 配置JdbcTemplete -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <!-- 指定构造器所需的参数 即数据源 名称和bean对象 -->
        <constructor-arg name="dataSource" ref="dataSource"></constructor-arg>
    </bean>

</beans>